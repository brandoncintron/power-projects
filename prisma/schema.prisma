generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

enum ProjectVisibility {
  PUBLIC
  PRIVATE
  UNIVERSITY
}

enum ProjectStatus {
  OPEN
  CLOSED
}

enum NotificationType {
  APPLICATION_ACCEPTED
  APPLICATION_REJECTED
  APPLICATION_SENT
  COLLABORATION_INVITE
  PROJECT_UPDATE
  MENTION
  MESSAGE
}

model Notification {
  id          String           @id @default(cuid())
  userId      String
  type        NotificationType
  title       String
  content     String?
  isRead      Boolean          @default(false)
  createdAt   DateTime         @default(now())
  
  projectId   String?
  senderId    String?
  
  // Relations
  user        User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  project     Project?         @relation(fields: [projectId], references: [id], onDelete: SetNull)
  sender      User?            @relation("NotificationSender", fields: [senderId], references: [id], onDelete: SetNull)
  
  @@index([userId])
  @@index([projectId])
  @@index([createdAt])
}

model User {
  id            String          @id @default(cuid())
  name          String?
  username      String?
  email         String          @unique
  emailVerified DateTime?
  image         String?
  password      String?
  accounts      Account[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Profile fields
  bio           String?
  location      String?
  pronouns      String?
  preferredLanguage String?
  github        String?
  linkedin      String?
  website       String?
  otherSocial   String?

  // --- Relationships to Project ---
  // Projects owned by the user
  ownedProjects     Project[]       @relation("OwnedProjects")
  // Projects the user is collaborating on
  collaborations    ProjectCollaborator[]
  // Applications submitted by the user
  applications      ProjectApplication[]
  notifications       Notification[]
  sentNotifications   Notification[]  @relation("NotificationSender")
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@id([provider, providerAccountId])
  @@index([userId, provider])
}

model Project {
  id              String   @id @default(cuid())
  projectName     String
  description     String   @db.VarChar(500)
  visibility      ProjectVisibility
  status          ProjectStatus @default(OPEN)
  completionDate  DateTime?
  teamName        String?
  applicationType String
  frameworks      String[]
  databases       String[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // --- GitHub Integration ---
  githubRepoUrl     String?
  githubRepoName    String?
  githubRepoOwner   String?
  githubConnectedAt DateTime?
  githubRepoCreatedViaApp Boolean @default(false)

  // --- Relationships ---
  // Relation to the owner (User)
  ownerId         String
  owner           User     @relation("OwnedProjects", fields: [ownerId], references: [id], onDelete: Cascade)

  // Relation to collaborators (many-to-many)
  collaborators   ProjectCollaborator[]

  // Relation to applicants (many-to-many)
  applicants      ProjectApplication[]

  @@index([ownerId]) // Index for faster lookups by owner
  notifications       Notification[]
}

// --- Join Table for Project Collaborators (Many-to-Many User <-> Project) ---
model ProjectCollaborator {
  userId    String
  projectId String
  assignedAt DateTime @default(now()) // When the user became a collaborator

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@id([userId, projectId]) // Composite primary key
  @@index([projectId])      // Index for faster lookups by project
}

// --- Join Table for Project Applications (Many-to-Many User <-> Project) ---
model ProjectApplication {
  id          String   @id @default(cuid())
  userId      String
  projectId   String
  status      String   @default("pending")
  message     String?
  appliedAt   DateTime @default(now())

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@unique([userId, projectId])
  @@index([projectId])      // Index for faster lookups by project
  @@index([userId])         // Index for faster lookups by user
}